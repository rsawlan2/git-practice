#!/usr/bin/env python3
# luna_rest_upload_test.py
# Tries several REST upload endpoints/field names against a Luna HSM webserver and prints results.
# Usage: python luna_rest_upload_test.py
# Make sure user_mgmt_role.txt is in cwd (or edit FILE_PATH variable).

import requests, getpass, os, sys, json
from requests.auth import HTTPBasicAuth

# CONFIG: change if needed
HOST = "10.24.128.69"
PORT = 8443       # detected from webserver show
USERNAME = input("Admin username (e.g. admin): ").strip() or "admin"
PASSWORD = getpass.getpass(f"Password for {USERNAME}@{HOST}: ")
FILE_PATH = "user_mgmt_role.txt"

if not os.path.exists(FILE_PATH):
    print(f"[ERROR] Local file not found: {FILE_PATH}")
    print("Run from the directory that contains the role file, or edit FILE_PATH in this script.")
    sys.exit(2)

base = f"https://{HOST}:{PORT}"
sess = requests.Session()
sess.auth = HTTPBasicAuth(USERNAME, PASSWORD)
sess.verify = False  # self-signed certs common on appliances

def show_root():
    try:
        r = sess.get(base + "/", timeout=10)
        print(f"[GET /] {r.status_code} {r.reason}")
        # print small snippet
        print(r.text[:800])
    except Exception as e:
        print("[GET /] ERROR:", e)

def list_users():
    urls = [f"{base}/api/users", f"{base}/users"]
    for u in urls:
        try:
            r = sess.get(u, timeout=15)
            print(f"[GET {u}] {r.status_code}")
            ct = r.headers.get("Content-Type","")
            print("  Content-Type:", ct)
            txt = r.text
            snippet = txt[:1500].strip()
            print("  Body snippet:", snippet[:500].replace("\n"," ") + ("..." if len(snippet)>500 else ""))
            # try to parse json
            try:
                j = r.json()
                # show first few user entries if list/dict
                if isinstance(j, list):
                    print("  Found user list length:", len(j))
                    for e in j[:8]:
                        print("   -", {k: e.get(k) for k in ("id","username","name","login") if k in e})
                elif isinstance(j, dict):
                    # maybe paged response with data
                    if "data" in j and isinstance(j["data"], list):
                        print("  Paged users, data length:", len(j["data"]))
                        for e in j["data"][:8]:
                            print("   -", {k: e.get(k) for k in ("id","username","name","login") if k in e})
            except Exception:
                pass
        except Exception as e:
            print(f"[GET {u}] ERROR: {e}")

def try_upload(target_url, form_field):
    print(f"\n[TRY] POST {target_url} using field '{form_field}'")
    try:
        with open(FILE_PATH, "rb") as f:
            files = {form_field: (os.path.basename(FILE_PATH), f)}
            r = sess.post(target_url, files=files, timeout=30)
    except Exception as e:
        print("  Request failed:", e)
        return
    print("  Status:", r.status_code)
    print("  Content-Type:", r.headers.get("Content-Type"))
    body = r.text or ""
    print("  Body (snippet):")
    print("  ", body[:1500].replace("\n"," ") + ("..." if len(body)>1500 else ""))

def main():
    print("[INFO] Server root:")
    show_root()

    print("\n[INFO] Attempting to list users (to detect numeric id vs username path):")
    list_users()

    # candidate endpoints: username path, numeric id (later), alternate roots
    candidate_endpoints = [
        f"{base}/api/users/{USERNAME}/files",
        f"{base}/users/{USERNAME}/files",
        f"{base}/api/users/{USERNAME}/roles/files",
        f"{base}/users/{USERNAME}/files",
    ]

    # candidate form field names to try
    fields = ["file", "uploadFile", "roleFile", "filedata", "fileToUpload"]

    for endpoint in candidate_endpoints:
        for fld in fields:
            try_upload(endpoint, fld)

    # If the /api/users returned numeric ids, try those too (attempt to parse)
    try:
        r = sess.get(f"{base}/api/users", timeout=15)
        js = r.json() if r.ok else None
        ids = []
        if isinstance(js, list):
            for u in js:
                uid = u.get("id") or u.get("userId") or u.get("uid")
                uname = u.get("username") or u.get("name") or u.get("login")
                if uid and uname:
                    ids.append((uid, uname))
        elif isinstance(js, dict) and "data" in js and isinstance(js["data"], list):
            for u in js["data"]:
                uid = u.get("id") or u.get("userId")
                uname = u.get("username") or u.get("name")
                if uid and uname:
                    ids.append((uid, uname))
        if ids:
            print("\n[INFO] Trying numeric-id upload endpoints discovered from /api/users:")
            for uid, uname in ids[:8]:
                ep = f"{base}/api/users/{uid}/files"
                for fld in fields:
                    try_upload(ep, fld)
        else:
            print("\n[INFO] No numeric ids parsed from /api/users (or /api/users not accessible).")
    except Exception as e:
        print("[INFO] Could not parse /api/users JSON:", e)

if __name__ == "__main__":
    main()
