#!/usr/bin/env python3
"""
Benchmark 3: Luna HSM SSH login + Webserver check + Role/User Management

- Reads host/port from resources/hsm_mapping.json using --hsm-id
- Prompts once for admin username + password
- Connects via SSH
- Checks webserver status with `webserver show`
- NEW: Uploads custom role file, imports role, creates new user with temp password,
       assigns role, forces password change on first login
"""

import sys, subprocess, importlib, getpass, json, os, socket, secrets, string, base64

# --- Ensure paramiko installed ---
try:
    import paramiko
except ImportError:
    print("[INFO] Installing paramiko...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "paramiko"])
    import paramiko

from paramiko import SSHClient, AutoAddPolicy, AuthenticationException, SSHException

RES_DIR = "resources"
HSM_FILE = os.path.join(RES_DIR, "hsm_mapping.json")
ROLES_DIR = os.path.join(RES_DIR, "roles")

# ---------------------------
# Helpers
# ---------------------------
def load_hsm(hsm_id: str) -> dict:
    if not os.path.exists(HSM_FILE):
        raise SystemExit(f"[ERROR] Missing mapping file: {HSM_FILE}")
    with open(HSM_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    for h in data.get("hsms", []):
        if h.get("id") == hsm_id:
            return h
    raise SystemExit(f"[ERROR] HSM id '{hsm_id}' not found in {HSM_FILE}")

def ssh_run(client: SSHClient, cmd: str, timeout: float = 15) -> tuple[str, str, int]:
    stdin, stdout, stderr = client.exec_command(cmd, timeout=timeout)
    out = stdout.read().decode(errors="ignore")
    err = stderr.read().decode(errors="ignore")
    try:
        rc = stdout.channel.recv_exit_status()
    except Exception:
        rc = -1
    return out, err, rc

def check_webserver_status(client):
    out, err, rc = ssh_run(client, "webserver show")
    combined = (out + err).lower()
    if "running" in combined or "enabled" in combined:
        return "ENABLED"
    if "not running" in combined or "stopped" in combined or "disabled" in combined:
        return "DISABLED"
    if "permission denied" in combined:
        return "NO_PERMISSION"
    if "not recognized" in combined or "unknown command" in combined:
        return "NOT_SUPPORTED"
    return "UNKNOWN"

def gen_password(length=16):
    chars = string.ascii_letters + string.digits + "!@#$%^&*()-_=+"
    while True:
        p = ''.join(secrets.choice(chars) for _ in range(length))
        if (any(c.islower() for c in p) and any(c.isupper() for c in p)
                and any(c.isdigit() for c in p) and any(c in "!@#$%^&*()-_=+" for c in p)):
            return p

# ---------------------------
# Role/User management
# ---------------------------
def upload_role_file(client, local_file, remote_file="/tmp/roledef.txt"):
    try:
        sftp = client.open_sftp()
        sftp.put(local_file, remote_file)
        sftp.close()
        print(f"[INFO] Uploaded role file to {remote_file}")
        return remote_file
    except Exception:
        print("[WARN] SFTP upload failed, trying base64 fallback...")
        data = open(local_file, "rb").read()
        b64 = base64.b64encode(data).decode()
        chunk_size = 1000
        client.exec_command(f"rm -f {remote_file}.b64 {remote_file}")
        for i in range(0, len(b64), chunk_size):
            chunk = b64[i:i+chunk_size]
            client.exec_command(f"echo {chunk} >> {remote_file}.b64")
        client.exec_command(f"base64 -d {remote_file}.b64 > {remote_file}")
        client.exec_command(f"rm -f {remote_file}.b64")
        print(f"[INFO] Uploaded role file via base64 to {remote_file}")
        return remote_file

def import_role(client, role_name, remote_path):
    cmd = f"user role import {role_name} {remote_path}"
    out, err, rc = ssh_run(client, cmd)
    if rc != 0:
        raise RuntimeError(f"Role import failed: {out} {err}")
    print(f"[INFO] Role {role_name} imported successfully")

def add_user(client, username, password):
    cmd = f"user add -userName {username} -password {password}"
    out, err, rc = ssh_run(client, cmd)
    if rc != 0:
        raise RuntimeError(f"Add user failed: {out} {err}")
    print(f"[INFO] User {username} created successfully")

def assign_role(client, username, role_name):
    cmd = f"user role add {username} {role_name}"
    out, err, rc = ssh_run(client, cmd)
    if rc != 0:
        raise RuntimeError(f"Assign role failed: {out} {err}")
    print(f"[INFO] Role {role_name} assigned to {username}")

def force_password_change(client, username, password):
    # Some versions require interactive password change. We'll just try:
    cmd = f"user password -userName {username}"
    chan = client.invoke_shell()
    chan.send(cmd + "\n")
    chan.send(password + "\n")
    chan.send(password + "\n")
    buff = ""
    while not chan.recv_ready():
        pass
    while chan.recv_ready():
        buff += chan.recv(1024).decode(errors="ignore")
    if "denied" in buff.lower():
        raise RuntimeError("Password change not permitted")
    print(f"[INFO] Password set for {username}, must change on first login")
    chan.close()

# ---------------------------
# Main
# ---------------------------
def main():
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument("--hsm-id", required=True, help="HSM ID from mapping JSON")
    p.add_argument("--role-file", required=True, help="Role definition file (in resources/roles/)")
    args = p.parse_args()

    hsm = load_hsm(args.hsm_id)
    host = hsm.get("ipAddress") or hsm.get("host")
    port = int(hsm.get("port", 22))

    admin_user = input("Admin Username: ").strip()
    admin_pwd = getpass.getpass("Admin Password: ")

    client = SSHClient()
    client.set_missing_host_key_policy(AutoAddPolicy())

    try:
        print(f"[INFO] Connecting to {host}:{port} as {admin_user} ...")
        client.connect(host, port=port, username=admin_user, password=admin_pwd,
                       allow_agent=False, look_for_keys=False, timeout=20)
    except AuthenticationException:
        print("[ERROR] Authentication failed.")
        return
    except (SSHException, socket.error) as e:
        print(f"[ERROR] SSH connection failed: {e}")
        return

    # Check webserver
    status = check_webserver_status(client)
    print(f"[WEB SERVER STATUS] {status}")

    # ---- NEW Role/User Management flow ----
    new_user = input("New Username to create: ").strip()
    temp_pwd = gen_password()
    role_path = os.path.join(ROLES_DIR, args.role_file)
    role_name = os.path.splitext(os.path.basename(role_path))[0]

    remote_path = upload_role_file(client, role_path)
    import_role(client, role_name, remote_path)
    add_user(client, new_user, temp_pwd)
    assign_role(client, new_user, role_name)
    force_password_change(client, new_user, temp_pwd)

    print(f"\n[RESULT] User {new_user} created with role {role_name}")
    print(f"Temporary password: {temp_pwd}")
    print("Password must be changed at first login.")

    client.close()

if __name__ == "__main__":
    main()
