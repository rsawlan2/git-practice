#!/usr/bin/env python3
"""
user_mgmt.py

Automates creation of a user-management role + user on Luna HSMs.

Added flags:
  --dry-run    : Show what would happen, but do nothing
  --test-ssh   : Test SSH login only (runs whoami + user list), then exit
"""

# --- Dependency bootstrap ---
try:
    import asyncssh, portalocker
except ImportError:
    import subprocess, sys
    print("[INFO] Installing required dependencies (asyncssh, portalocker)...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "asyncssh", "portalocker"])
    import asyncssh, portalocker

import os, json, asyncio, secrets, string, random, getpass

# ----------------------------
# Config
# ----------------------------
RES_DIR = "resources"
HSM_FILE = os.path.join(RES_DIR, "hsm_mapping.json")
VERSION_FILE = os.path.join(RES_DIR, "version_map.json")
ROLES_DIR = os.path.join(RES_DIR, "roles")
FAILED_LOG = os.path.join(RES_DIR, "failed_jobs.jsonl")
DEFAULT_ROLE_FILE = "user_mgmt_role.txt"

SSH_RETRIES = 3
BACKOFF_BASE = 0.5
BACKOFF_FACTOR = 2.0
BACKOFF_JITTER = 0.2

# ----------------------------
# Helpers
# ----------------------------
def load_json(path):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def check_fw_version(v, cmp_to="7.8.0"):
    """Return True if firmware version >= cmp_to (default 7.8.0)."""
    def parse(s): return tuple(int(x) for x in s.split("."))
    return parse(v) >= parse(cmp_to)

def gen_username():
    return "usermgmt_" + secrets.token_hex(3)

def gen_password(length=16):
    chars = string.ascii_letters + string.digits + "!@#$%^&*()-_=+"
    while True:
        p = ''.join(secrets.choice(chars) for _ in range(length))
        if (any(c.islower() for c in p) and any(c.isupper() for c in p)
                and any(c.isdigit() for c in p) and any(c in "!@#$%^&*()-_=+" for c in p)):
            return p

async def backoff_sleep(attempt):
    base = BACKOFF_BASE * (BACKOFF_FACTOR ** (attempt - 1))
    jitter = random.uniform(-BACKOFF_JITTER, BACKOFF_JITTER)
    await asyncio.sleep(max(0, base + jitter))

def write_failed(entry):
    os.makedirs(os.path.dirname(FAILED_LOG), exist_ok=True)
    with portalocker.Lock(FAILED_LOG, mode="a", timeout=5) as fh:
        fh.write(json.dumps(entry) + "\n")

def get_content_type_token(version_map, fw_version):
    token = version_map.get(fw_version)
    if token is None:
        raise KeyError(f"Firmware version '{fw_version}' not found in {VERSION_FILE}")
    return token

# ----------------------------
# Curl command wrappers
# ----------------------------
async def run_cmd(cmd):
    proc = await asyncio.create_subprocess_exec(*cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE)
    out, err = await proc.communicate()
    return proc.returncode, (out.decode() + err.decode()).strip()

async def check_webserver_curl(base_url, insecure):
    """Check if HSM webserver is reachable on 8443 via curl."""
    url = f"{base_url}/"
    cmd = ["curl", "-s", "-o", "/dev/null", "-w", "%{http_code}", "-I", url]
    if insecure: cmd.insert(1, "-k")
    _, out = await run_cmd(cmd)
    return out.strip()

async def curl_auth(base_url, admin_user, admin_pass, ct, insecure):
    url = f"{base_url}/auth/session"
    cmd = ["curl", "-s", "-S", "-i", "-X", "POST",
           "-H", f"Content-Type: {ct}",
           "-u", f"{admin_user}:{admin_pass}", url]
    if insecure: cmd.insert(1, "-k")
    rc, out = await run_cmd(cmd)
    for line in out.splitlines():
        if "SESSION_ID=" in line:
            return line.split("SESSION_ID=")[1].split(";")[0].strip()
    raise RuntimeError(f"REST login failed (rc={rc}): {out}")

async def curl_post_role(base_url, sid, ct, role, insecure):
    url = f"{base_url}/roles"
    payload = json.dumps({"roleId": role})
    cmd = ["curl", "-s", "-o", "/dev/null", "-w", "%{http_code}",
           "-X", "POST", "-H", f"Content-Type: {ct}",
           "-H", f"Cookie: SESSION_ID={sid}", url, "-d", payload]
    if insecure: cmd.insert(1, "-k")
    _, out = await run_cmd(cmd)
    return int(out.strip() or -1)

async def curl_put_rolefile(base_url, sid, ct_file, path, role, insecure):
    url = f"{base_url}/roles/{role}/resources"
    cmd = ["curl", "-s", "-o", "/dev/null", "-w", "%{http_code}",
           "-X", "PUT", "-H", f"Content-Type: {ct_file}",
           "-H", f"Cookie: SESSION_ID={sid}", url, "--data-binary", f"@{path}"]
    if insecure: cmd.insert(1, "-k")
    _, out = await run_cmd(cmd)
    return int(out.strip() or -1)

async def curl_post_user(base_url, sid, ct, user, pwd, role, insecure):
    url = f"{base_url}/users"
    payload = json.dumps({"userId": user, "role": role, "password": pwd})
    cmd = ["curl", "-s", "-o", "/dev/null", "-w", "%{http_code}",
           "-X", "POST", "-H", f"Content-Type: {ct}",
           "-H", f"Cookie: SESSION_ID={sid}", url, "-d", payload]
    if insecure: cmd.insert(1, "-k")
    _, out = await run_cmd(cmd)
    return int(out.strip() or -1)

async def curl_get_users(base_url, sid, ct, insecure):
    url = f"{base_url}/users"
    cmd = ["curl", "-s", "-i", "-X", "GET",
           "-H", f"Content-Type: {ct}",
           "-H", f"Cookie: SESSION_ID={sid}", url]
    if insecure: cmd.insert(1, "-k")
    _, out = await run_cmd(cmd)
    return out

# ----------------------------
# LunaSH (SSH) functions
# ----------------------------
async def lunash_setup(hsm, ssh_user, ssh_pass, role_file, user, pwd):
    host = hsm.get("ipAddress") or hsm.get("host")
    port = int(hsm.get("port", 22))
    local_role = os.path.join(ROLES_DIR, role_file)
    role_name = os.path.splitext(os.path.basename(local_role))[0]
    remote_role = f"/tmp/{os.path.basename(local_role)}"

    try:
        async with asyncssh.connect(
            host,
            port=port,
            username=ssh_user,
            password=ssh_pass,
            known_hosts=None,
            client_keys=None,
            password_auth=False,
            kbd_interactive_auth=True
        ) as conn:
            async with conn.start_sftp_client() as sftp:
                await sftp.put(local_role, remote_role)
            await conn.run(f"user role import {role_name} {remote_role}")
            await conn.run(f"user add {user} -password {pwd}")
            await conn.run(f"user role add {user} {role_name}")
            await conn.run(f"user password {user}", input=(pwd + "\n" + pwd + "\n"))
            out = (await conn.run("user list")).stdout
            return user in out
    except Exception as e:
        raise RuntimeError(f"LunaSH error: {e}")

async def lunash_check_webserver(hsm, ssh_user, ssh_pass):
    """Run 'webserver show' over SSH instead of curl to check status."""
    host = hsm.get("ipAddress") or hsm.get("host")
    port = int(hsm.get("port", 22))
    try:
        async with asyncssh.connect(
            host,
            port=port,
            username=ssh_user,
            password=ssh_pass,
            known_hosts=None,
            client_keys=None,
            password_auth=False,
            kbd_interactive_auth=True
        ) as conn:
            res = await conn.run("webserver show", check=False)
            print("==== RAW OUTPUT FROM HSM ====")
            print(res.stdout)
            print("==== END RAW OUTPUT ====")
            out = res.stdout.lower()
            if ("status" in out) and ("running" in out):
                return True
            return False
    except Exception as e:
        print(f"[DEBUG] webserver check error: {e}")
        return False

# ----------------------------
# SSH test-only helper
# ----------------------------
async def test_ssh_one(hsm, ssh_user, ssh_pass):
    """Connect and run a couple of simple commands to verify auth."""
    host = hsm.get("ipAddress") or hsm.get("host")
    port = int(hsm.get("port", 22))
    try:
        async with asyncssh.connect(
            host,
            port=port,
            username=ssh_user,
            password=ssh_pass,
            known_hosts=None,
            client_keys=None,
            password_auth=False,
            kbd_interactive_auth=True
        ) as conn:
            # run simple checks
            who = await conn.run("whoami", check=False)
            ulist = await conn.run("user list", check=False)
            print(f"[{hsm.get('id')} | {host}] whoami stdout:")
            print(who.stdout.strip())
            print(f"[{hsm.get('id')} | {host}] user list (first 200 chars):")
            print(ulist.stdout[:200])
            return True, None
    except Exception as e:
        return False, str(e)

# ----------------------------
# Orchestration per HSM
# ----------------------------
async def process_hsm(hsm, admin_user, admin_pass, role_file, version_map, insecure, test_ssh_only=False):
    hid = hsm.get("id")
    fw = hsm.get("fwVersion")
    host = hsm.get("ipAddress") or hsm.get("host") or "<no-host>"

    try:
        token = get_content_type_token(version_map, fw)
    except KeyError as e:
        print(f"[{hid}] Version map error: {e}")
        write_failed({"hsm_id": hid, "stage": "version-map", "error": str(e)})
        return {"hsm": hid, "status": "FAILED"}

    ct_json = f"application/vnd.safenetinc.lunasa+json;version={token}"
    ct_file = f"application/vnd.safenetinc.lunasa+file;version={token}"
    print(f"[{hid} | {host}] fw={fw} -> REST v{token}")

    # If test-ssh-only requested, just validate SSH and return
    if test_ssh_only:
        ok = False
        last_err = None
        for attempt in range(1, SSH_RETRIES + 1):
            ok, last_err = await test_ssh_one(hsm, admin_user, admin_pass)
            if ok:
                break
            print(f"[{hid}] SSH test attempt {attempt} failed: {last_err}")
            if attempt < SSH_RETRIES:
                await backoff_sleep(attempt)
        if not ok:
            write_failed({"hsm_id": hid, "stage": "ssh-test", "error": last_err})
            return {"hsm": hid, "status": "SSH-FAILED", "error": last_err}
        return {"hsm": hid, "status": "SSH-OK"}

    user, pwd = gen_username(), gen_password()
    base = hsm.get("rest_url") or f"https://{host}:8443"

    # Webserver check via LunaSH
    ok = False
    for attempt in range(1, SSH_RETRIES+1):
        if await lunash_check_webserver(hsm, admin_user, admin_pass):
            ok = True
            break
        await backoff_sleep(attempt)
    if not ok:
        print(f"[{hid}] Webserver check failed (via LunaSH)")
        write_failed({"hsm_id": hid, "stage": "webserver", "error": "Webserver not running (LunaSH)"})
        return {"hsm": hid, "status": "FAILED"}

    # LunaSH if old firmware
    if not check_fw_version(fw):
        ssh_user = admin_user
        ok = False
        for attempt in range(1, SSH_RETRIES+1):
            try:
                await lunash_setup(hsm, ssh_user, admin_pass, role_file, user, pwd)
                ok = True; break
            except Exception as e:
                print(f"[{hid}] SSH attempt {attempt} failed: {e}")
                if attempt < SSH_RETRIES:
                    await backoff_sleep(attempt)
        if not ok:
            write_failed({"hsm_id": hid, "stage": "lunash", "error": "SSH failed"})
            return {"hsm": hid, "status": "FAILED"}

    # REST flow
    try:
        sid = await curl_auth(base, admin_user, admin_pass, ct_json, insecure)
        rc = await curl_post_role(base, sid, ct_json, os.path.splitext(role_file)[0], insecure)
        if rc not in (200,201,204,409):
            raise RuntimeError(f"Role create failed (HTTP {rc})")
        rc = await curl_put_rolefile(base, sid, ct_file, os.path.join(ROLES_DIR, role_file), os.path.splitext(role_file)[0], insecure)
        if rc not in (200,201,204):
            raise RuntimeError(f"Role upload failed (HTTP {rc})")
        rc = await curl_post_user(base, sid, ct_json, user, pwd, os.path.splitext(role_file)[0], insecure)
        if rc not in (200,201,204):
            raise RuntimeError(f"User create failed (HTTP {rc})")
        out = await curl_get_users(base, sid, ct_json, insecure)
        if user not in out:
            return {"hsm": hid, "status": "WARN", "user": user, "password": pwd}
    except Exception as e:
        print(f"[{hid}] REST error: {e}")
        write_failed({"hsm_id": hid, "stage": "rest", "error": str(e)})
        return {"hsm": hid, "status": "FAILED"}

    return {"hsm": hid, "status": "OK", "user": user, "password": pwd, "note": "password will be forced to change at first login"}

# ----------------------------
# Runner
# ----------------------------
async def run_all(hsm_ids, admin_user, admin_pass, role_file, insecure, test_ssh_only=False):
    hsms = load_json(HSM_FILE).get("hsms", [])
    version_map = load_json(VERSION_FILE)
    lookup = {h["id"]: h for h in hsms}
    tasks = []
    for hid in hsm_ids:
        if hid not in lookup:
            print(f"[SKIP] {hid} not found in {HSM_FILE}")
            continue
        tasks.append(process_hsm(lookup[hid], admin_user, admin_pass, role_file, version_map, insecure, test_ssh_only=test_ssh_only))
    return await asyncio.gather(*tasks)

def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--hsm-ids", nargs="+", required=True)
    parser.add_argument("--admin-user", required=True)
    parser.add_argument("--role-file", default=DEFAULT_ROLE_FILE)
    parser.add_argument("--insecure", action="store_true")
    parser.add_argument("--dry-run", action="store_true", help="Show what would happen, but do nothing")
    parser.add_argument("--test-ssh", action="store_true", help="Only test SSH auth/connectivity and exit")
    args = parser.parse_args()

    admin_pass = getpass.getpass("Admin password: ")

    # DRY RUN mode
    if args.dry_run:
        hsms = load_json(HSM_FILE).get("hsms", [])
        version_map = load_json(VERSION_FILE)
        lookup = {h["id"]: h for h in hsms}
        print("\n=== DRY RUN MODE ===")
        for hid in args.hsm_ids:
            hsm = lookup.get(hid)
            if not hsm:
                print(f"[SKIP] {hid} not found in hsm_mapping.json")
                continue
            fw = hsm.get("fwVersion")
            host = hsm.get("ipAddress") or hsm.get("host") or "<no-host>"
            token = version_map.get(fw, "??")
            user, pwd = gen_username(), gen_password()
            print(f"[{hid} | {host}] fw={fw} -> REST v{token}")
            print(f" Would create user={user} pass={pwd} with role={os.path.splitext(args.role_file)[0]}")
        print("=== END DRY RUN ===")
        return

    # Test SSH-only mode
    if args.test_ssh:
        results = asyncio.run(run_all(args.hsm_ids, args.admin_user, admin_pass, args.role_file, args.insecure, test_ssh_only=True))
        print("\nSSH TEST RESULTS:")
        for r in results:
            print(r)
        return

    # Normal execution
    results = asyncio.run(run_all(args.hsm_ids, args.admin_user, admin_pass, args.role_file, args.insecure))
    print("\nRESULTS:")
    for r in results:
        if r["status"] == "OK":
            print(f"[{r['hsm']}] OK user={r['user']} pass={r['password']} ({r['note']})")
        elif r["status"] == "WARN":
            print(f"[{r['hsm']}] WARN user={r['user']} pass={r['password']} not verified")
        else:
            print(f"[{r['hsm']}] FAILED (see console above and resources/failed_jobs.jsonl)")

if __name__ == "__main__":
    main()
