#!/usr/bin/env python3
"""
Minimal Luna HSM SSH login via HSM ID + Webserver check.

- Reads host/port from resources/hsm_mapping.json using --hsm-id
- Prompts once for admin username + password
- Connects via SSH
- Runs `webserver show` to check if webserver is enabled/disabled
- INTERACTIVE: prompts admin whether to create a new LunaSH user; if yes, prompts for
  username and role, generates a temp password, creates the user, assigns the role,
  and saves the temp password (overwritten each run) to resources/user_passwords.json
- Then verifies HSM connectivity by running `hsm show` silently and prints only success message
"""

import sys, subprocess, getpass, json, os, socket, secrets, string, datetime

# --- Ensure paramiko installed ---
try:
    import paramiko
except ImportError:
    print("[INFO] Installing paramiko...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "paramiko"])
    import paramiko

from paramiko import SSHClient, AutoAddPolicy, AuthenticationException, SSHException

RES_DIR = "resources"
HSM_FILE = os.path.join(RES_DIR, "hsm_mapping.json")
PW_STORE = os.path.join(RES_DIR, "user_passwords.json")

os.makedirs(RES_DIR, exist_ok=True)

def load_hsm(hsm_id: str) -> dict:
    if not os.path.exists(HSM_FILE):
        raise SystemExit(f"[ERROR] Missing mapping file: {HSM_FILE}")
    with open(HSM_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    for h in data.get("hsms", []):
        if h.get("id") == hsm_id:
            return h
    raise SystemExit(f"[ERROR] HSM id '{hsm_id}' not found in {HSM_FILE}")

def ssh_run(client: SSHClient, cmd: str, timeout: float = 10, input_text: str = None) -> tuple[str, str, int]:
    stdin, stdout, stderr = client.exec_command(cmd, timeout=timeout)
    if input_text is not None:
        try:
            stdin.write(input_text)
            stdin.flush()
        except Exception:
            pass
    out = stdout.read().decode(errors="ignore")
    err = stderr.read().decode(errors="ignore")
    try:
        rc = stdout.channel.recv_exit_status()
    except Exception:
        rc = -1
    return out, err, rc

def check_webserver_status(client):
    out, err, rc = ssh_run(client, "webserver show")
    combined = (out + err).lower()
    if "running" in combined or "enabled" in combined:
        return "ENABLED"
    if "not running" in combined or "stopped" in combined or "disabled" in combined:
        return "DISABLED"
    if "permission denied" in combined:
        return "NO_PERMISSION"
    if "not recognized" in combined or "unknown command" in combined:
        return "NOT_SUPPORTED"
    return "UNKNOWN"

def _generate_temp_password(length: int = 20) -> str:
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*()-_=+"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def _save_password_for_user(username: str, password: str) -> None:
    data = {}
    if os.path.exists(PW_STORE):
        try:
            with open(PW_STORE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception:
            data = {}
    data[username] = {
        "password": password,
        "created_at": datetime.datetime.utcnow().isoformat() + "Z"
    }
    tmp = PW_STORE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)
    os.replace(tmp, PW_STORE)
    try:
        os.chmod(PW_STORE, 0o600)
    except Exception:
        print(f"[WARN] Could not set file permissions on {PW_STORE}. Secure it manually.")

def prompt_new_user_and_role() -> tuple[str, str]:
    while True:
        new_user = input("Enter the new username to create: ").strip()
        if new_user:
            break
        print("[ERROR] username cannot be empty.")
    while True:
        new_role = input(f"Enter role to assign to '{new_user}': ").strip()
        if new_role:
            break
        print("[ERROR] role cannot be empty.")
    return new_user, new_role

def create_lunash_user_and_store_password(client: SSHClient, username: str, role: str) -> bool:
    print(f"[INFO] Creating LunaSH user '{username}' with role '{role}' ...")
    temp_pw = _generate_temp_password(20)
    stdin_payload = f"{temp_pw}\n{temp_pw}\n"
    cmd_add = f"user add -username {username}"
    out, err, rc = ssh_run(client, cmd_add, timeout=60, input_text=stdin_payload)
    combined = (out + err).lower()
    if rc != 0:
        print(f"[ERROR] Creating user '{username}' failed (rc={rc}).")
        if "permission denied" in combined or "not authorized" in combined:
            print("[ERROR] Permission denied — need admin privileges to create users.")
        return False
    print(f"[INFO] user '{username}' created. Now assigning role '{role}' ...")
    cmd_role = f"user role add -username {username} -role {role}"
    out2, err2, rc2 = ssh_run(client, cmd_role, timeout=30)
    combined2 = (out2 + err2).lower()
    if rc2 != 0:
        print(f"[ERROR] Assigning role '{role}' to '{username}' failed (rc={rc2}).")
        if "permission denied" in combined2 or "not authorized" in combined2:
            print("[ERROR] Permission denied — cannot assign role.")
        return False
    try:
        _save_password_for_user(username, temp_pw)
        print(f"[INFO] Temporary password saved to: {PW_STORE} (overwritten for user '{username}').")
        print("[INFO] Password is NOT printed to console for security.")
    except Exception as e:
        print(f"[WARN] Could not save password to {PW_STORE}: {e}")
    return True

def main():
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument("--hsm-id", required=True, help="HSM ID from mapping JSON")
    args = p.parse_args()

    hsm = load_hsm(args.hsm_id)
    host = hsm.get("ipAddress") or hsm.get("host")
    port = int(hsm.get("port", 22))

    admin_user = input("Username: ").strip()
    admin_pwd = getpass.getpass("Password: ")

    client = SSHClient()
    client.set_missing_host_key_policy(AutoAddPolicy())

    try:
        print(f"[INFO] Connecting to {host}:{port} as {admin_user} ...")
        client.connect(
            hostname=host,
            port=port,
            username=admin_user,
            password=admin_pwd,
            allow_agent=False,
            look_for_keys=False,
            timeout=20,
        )
    except AuthenticationException:
        print("[ERROR] Authentication failed.")
        return
    except (SSHException, socket.error) as e:
        print(f"[ERROR] SSH connection failed: {e}")
        return

    status = check_webserver_status(client)
    print(f"[WEB SERVER STATUS] {status}")

    answer = input("Create new user now? (y/N): ").strip().lower()
    if answer == "y":
        new_user, new_role = prompt_new_user_and_role()
        ok = create_lunash_user_and_store_password(client, new_user, new_role)
        if not ok:
            print("[WARN] create-user flow reported failure; continuing with HSM check.")
    else:
        print("[INFO] Skipping user creation.")

    # Run 'hsm show' silently and print success message instead of full output
    try:
        _, _, rc2 = ssh_run(client, "hsm show")
        if rc2 == 0:
            print("[INFO] Connected and HSM is running successfully.")
        else:
            print("[WARN] Connected but HSM show returned non-zero exit code.")
    except Exception as e:
        print(f"[ERROR] Could not verify HSM status: {e}")

    client.close()

if __name__ == "__main__":
    main()
