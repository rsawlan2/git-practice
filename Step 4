#!/usr/bin/env python3
"""
Luna HSM role import + user creation (version-aware, SCP only)

- Reads host/port from resources/hsm_mapping.json using --hsm-id
- Prompts once for admin username + password
- Connects via SSH
- Checks webserver status
- Detects Luna version
- Generates version-appropriate role file content in-memory
- Writes it temporarily for scp transfer, uploads via scp -O
- Imports role, assigns to user, and verifies connectivity
"""

import argparse
import os
import json
import datetime
import secrets
import string
import subprocess
import getpass
import socket
import re
import tempfile
from paramiko import SSHClient, AutoAddPolicy, AuthenticationException, SSHException

# ----------------------------------------------------------------------
# Constants
# ----------------------------------------------------------------------
RES_DIR = "resources"
HSM_FILE = os.path.join(RES_DIR, "hsm_mapping.json")
PW_STORE = os.path.join(RES_DIR, "user_passwords.json")
os.makedirs(RES_DIR, exist_ok=True)

# ----------------------------------------------------------------------
# Version â†’ role command mapping
# ----------------------------------------------------------------------
ROLE_DEFINITIONS = {
    "7.3": [
        "user list", "user add", "user delete", "user enable", "user disable",
        "user password", "user role add", "user role delete", "user role clear",
        "user role list", "user role import"
    ],
    "7.7": [
        "user list", "user add", "user delete", "user enable", "user disable",
        "user password", "user radiusAdd",
        "user role add", "user role delete", "user role list", "user role import"
    ],
    "7.9": [
        "user list", "user add", "user delete", "user enable", "user disable",
        "user password", "user radiusAdd", "user radiusDelete",
        "user role add", "user role delete", "user role list", "user role import"
    ]
}

FALLBACK_ROLE = [
    "user list", "user add", "user delete", "user password",
    "user role list", "user role import"
]

# ----------------------------------------------------------------------
# Utility
# ----------------------------------------------------------------------
def ssh_run(client, cmd, timeout=10, input_text=None):
    stdin, stdout, stderr = client.exec_command(cmd, timeout=timeout)
    if input_text:
        stdin.write(input_text)
        stdin.flush()
    out, err = stdout.read().decode(errors="ignore"), stderr.read().decode(errors="ignore")
    rc = stdout.channel.recv_exit_status()
    return out, err, rc

def _generate_temp_password(length=16):
    alphabet = string.ascii_letters + string.digits + "._-"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def _save_password_for_user(username, password):
    data = {}
    if os.path.exists(PW_STORE):
        try:
            with open(PW_STORE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception:
            data = {}
    data[username] = {"password": password, "created_at": datetime.datetime.utcnow().isoformat() + "Z"}
    tmp = PW_STORE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)
    os.replace(tmp, PW_STORE)
    try: os.chmod(PW_STORE, 0o600)
    except Exception: pass

def load_hsm(hsm_id):
    if not os.path.exists(HSM_FILE):
        raise SystemExit(f"[ERROR] Missing mapping file: {HSM_FILE}")
    with open(HSM_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    for h in data.get("hsms", []):
        if h.get("id") == hsm_id:
            return h
    raise SystemExit(f"[ERROR] HSM id '{hsm_id}' not found in mapping.")

def pick_role_version_from_text(text):
    m = re.search(r"(\d+)\.(\d+)", text)
    if not m: return ""
    tag = f"{m.group(1)}.{m.group(2)}"
    if tag.startswith("7.3") or tag.startswith("7.4"): return "7.3"
    if tag.startswith("7.7") or tag.startswith("7.8"): return "7.7"
    if tag.startswith("7.9") or tag.startswith("7.10") or tag.startswith("7.11"): return "7.9"
    return ""

def get_role_lines_for_tag(tag):
    return ROLE_DEFINITIONS.get(tag, FALLBACK_ROLE)

# ----------------------------------------------------------------------
# Core steps
# ----------------------------------------------------------------------
def check_webserver_status(client):
    out, err, rc = ssh_run(client, "webserver show")
    text = (out + err).lower()
    if "running" in text or "enabled" in text: return "ENABLED"
    if "disabled" in text or "not running" in text: return "DISABLED"
    return "UNKNOWN"

def create_lunash_user(client, username):
    temp_pw = _generate_temp_password()
    cmd = f"user add -username {username}"
    out, err, rc = ssh_run(client, cmd, input_text=f"{temp_pw}\n{temp_pw}\n", timeout=60)
    if rc != 0 or "error" in (out + err).lower():
        print("[ERROR] User creation failed:\n", out + err)
        return None
    print(f"[INFO] Created user '{username}' successfully.")
    _save_password_for_user(username, temp_pw)
    return temp_pw

def make_temp_role_file(lines):
    """Write a temporary role file for scp upload."""
    fd, path = tempfile.mkstemp(prefix="role_", suffix=".txt")
    os.close(fd)
    with open(path, "w", encoding="utf-8", newline="\n") as f:
        for l in lines:
            f.write(l.rstrip() + "\n")
    return path

def scp_upload(host, user, local_path, remote_name):
    """Upload file using scp -O."""
    cmd = f'scp -O "{local_path}" {user}@{host}:{remote_name}'
    print(f"[INFO] Uploading role file via scp:\n  {cmd}")
    res = subprocess.run(cmd, shell=True)
    if res.returncode == 0:
        print("[INFO] Upload successful.")
        return True
    print(f"[ERROR] scp failed (rc={res.returncode})")
    return False

def import_role_and_assign(client, username, remote_name, role_name):
    """Import and assign role."""
    print(f"[INFO] Importing role '{role_name}' from file '{remote_name}'...")
    cmds = [
        f"user role import -file {remote_name} -role {role_name}",
        f"user role import -role {role_name} -file {remote_name}",
        f"user role import {remote_name}"
    ]
    for c in cmds:
        out, err, rc = ssh_run(client, c, timeout=30)
        combo = (out + err).lower()
        if rc == 0 and "error" not in combo and "unknown" not in combo:
            print(f"[INFO] Role import succeeded using '{c}'")
            break
    else:
        print(f"[ERROR] All import attempts failed:\n{out+err}")
        return False

    out, err, rc = ssh_run(client, f"user role add -username {username} -role {role_name}", timeout=25)
    if rc == 0 and "error" not in (out + err).lower():
        print(f"[INFO] Role '{role_name}' assigned to user '{username}'.")
        return True
    print(f"[ERROR] Role assignment failed:\n{out+err}")
    return False

# ----------------------------------------------------------------------
# Main
# ----------------------------------------------------------------------
def main():
    p = argparse.ArgumentParser()
    p.add_argument("--hsm-id", required=True)
    args = p.parse_args()

    hsm = load_hsm(args.hsm_id)
    host = hsm.get("ipAddress") or hsm.get("host")
    port = int(hsm.get("port", 22))

    admin_user = input("Username: ").strip()
    admin_pwd = getpass.getpass("Password: ")

    client = SSHClient()
    client.set_missing_host_key_policy(AutoAddPolicy())
    try:
        print(f"[INFO] Connecting to {host}:{port}...")
        client.connect(hostname=host, port=port,
                       username=admin_user, password=admin_pwd,
                       allow_agent=False, look_for_keys=False, timeout=20)
    except (AuthenticationException, SSHException, socket.error) as e:
        print(f"[ERROR] SSH connection failed: {e}")
        return

    web_status = check_webserver_status(client)
    print(f"[WEB SERVER STATUS] {web_status}")

    out, _, _ = ssh_run(client, "version", timeout=10)
    tag = pick_role_version_from_text(out.lower())
    print(f"[INFO] Detected version tag: {tag or 'fallback'}")

    lines = get_role_lines_for_tag(tag)
    role_name = f"user_mgmt_role_{tag or 'fallback'}"
    remote_file = f"{role_name}.txt"

    temp_path = make_temp_role_file(lines)
    if not scp_upload(host, admin_user, temp_path, remote_file):
        os.remove(temp_path)
        client.close()
        return
    os.remove(temp_path)  # cleanup local temp

    new_user = input("Enter new username to create: ").strip()
    temp_pw = create_lunash_user(client, new_user)
    if not temp_pw:
        client.close()
        return

    if not import_role_and_assign(client, new_user, remote_file, role_name):
        print("[ERROR] Role import or assignment failed.")
    else:
        print(f"[SUCCESS] Role '{role_name}' imported and assigned to '{new_user}'.")

    _, _, rc = ssh_run(client, "hsm show", timeout=20)
    print("[INFO] HSM connectivity verified." if rc == 0 else "[WARN] hsm show returned nonzero.")

    client.close()

if __name__ == "__main__":
    main()
